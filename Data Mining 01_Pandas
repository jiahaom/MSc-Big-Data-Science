{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "# 1: Data Warm-Up"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## What I can do:\n",
    "- Explore the Dataset -- using Python's Pandas.\n",
    "    - Upload the CSV file to this machine.\n",
    "    - Load the dataset from the CSV file.\n",
    "    - Get general information about the data.\n",
    "    \n",
    "- Basic exploratory questions using Python.\n",
    "- Basic data visualisation using Python."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "KKlNqAg6MzRP"
   },
   "source": [
    "## 1.   Explore the Dataset -- using Python's `Pandas`\n",
    "### 1.1   Upload the CSV file to this machine.\n",
    "### 1.2   Load the dataset from the CSV file:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "cellView": "both",
    "colab": {},
    "colab_type": "code",
    "id": "KjvGRNGgNnzF"
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "df = pd.read_csv('./LondonCars2014.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.3   Get general information about the data:\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "OyU38RdluTuA"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Make</th>\n",
       "      <th>Model</th>\n",
       "      <th>Year</th>\n",
       "      <th>Mileage</th>\n",
       "      <th>Price</th>\n",
       "      <th>Body Style</th>\n",
       "      <th>Ex Color</th>\n",
       "      <th>In Color</th>\n",
       "      <th>Engine</th>\n",
       "      <th>Transmission</th>\n",
       "      <th>Doors</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Toyota</td>\n",
       "      <td>Avalon XLE</td>\n",
       "      <td>2014</td>\n",
       "      <td>4725</td>\n",
       "      <td>28995</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>Gray</td>\n",
       "      <td>Black</td>\n",
       "      <td>6 Cyl</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Ford</td>\n",
       "      <td>Escape SE</td>\n",
       "      <td>2014</td>\n",
       "      <td>17201</td>\n",
       "      <td>24994</td>\n",
       "      <td>SUV</td>\n",
       "      <td>Silver</td>\n",
       "      <td>Black</td>\n",
       "      <td>4 Cyl</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Hyundai</td>\n",
       "      <td>Santa Fe Sport</td>\n",
       "      <td>2014</td>\n",
       "      <td>6279</td>\n",
       "      <td>25998</td>\n",
       "      <td>SUV</td>\n",
       "      <td>Silver</td>\n",
       "      <td>Gray</td>\n",
       "      <td>4 Cyl</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Ford</td>\n",
       "      <td>Escape SE</td>\n",
       "      <td>2014</td>\n",
       "      <td>16262</td>\n",
       "      <td>26684</td>\n",
       "      <td>SUV</td>\n",
       "      <td>Black</td>\n",
       "      <td>Black</td>\n",
       "      <td>4 Cyl</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Jeep</td>\n",
       "      <td>Grand Cherokee Limited Edition</td>\n",
       "      <td>2014</td>\n",
       "      <td>35572</td>\n",
       "      <td>33440</td>\n",
       "      <td>SUV</td>\n",
       "      <td>Black</td>\n",
       "      <td>Black</td>\n",
       "      <td>6 Cyl</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Make                           Model  Year  Mileage  Price Body Style  \\\n",
       "0   Toyota                      Avalon XLE  2014     4725  28995      Sedan   \n",
       "1     Ford                       Escape SE  2014    17201  24994        SUV   \n",
       "2  Hyundai                  Santa Fe Sport  2014     6279  25998        SUV   \n",
       "3     Ford                       Escape SE  2014    16262  26684        SUV   \n",
       "4     Jeep  Grand Cherokee Limited Edition  2014    35572  33440        SUV   \n",
       "\n",
       "  Ex Color In Color Engine Transmission  Doors  \n",
       "0     Gray    Black  6 Cyl    Automatic      4  \n",
       "1   Silver    Black  4 Cyl    Automatic      4  \n",
       "2   Silver     Gray  4 Cyl    Automatic      4  \n",
       "3    Black    Black  4 Cyl    Automatic      4  \n",
       "4    Black    Black  6 Cyl    Automatic      4  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "C5LylI4xWT9N"
   },
   "source": [
    "We have noticed that the data-types are not exactly correct. For instance, the type for the `Doors` attribute (column) is inferred as numeric (64-bit integer), so we need to fix them."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "vZjVv-6mXrAe"
   },
   "outputs": [],
   "source": [
    "df = df.astype({'Make':'category', 'Model':'category', 'Year':'category', \n",
    "                'Mileage':'int32', 'Price':'int64', 'Body Style':'category', \n",
    "                'Ex Color':'category' , 'In Color':'category', \n",
    "                'Engine':'category', 'Transmission':'category', 'Doors':'category'})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "CivnwTo2ZtME"
   },
   "source": [
    "Now, use the `info` method again to check if it had the desired effect:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 9080 entries, 0 to 9079\n",
      "Data columns (total 11 columns):\n",
      " #   Column        Non-Null Count  Dtype   \n",
      "---  ------        --------------  -----   \n",
      " 0   Make          9080 non-null   category\n",
      " 1   Model         9080 non-null   category\n",
      " 2   Year          9080 non-null   category\n",
      " 3   Mileage       9080 non-null   int32   \n",
      " 4   Price         9080 non-null   int64   \n",
      " 5   Body Style    9080 non-null   category\n",
      " 6   Ex Color      9080 non-null   category\n",
      " 7   In Color      9080 non-null   category\n",
      " 8   Engine        9080 non-null   category\n",
      " 9   Transmission  9080 non-null   category\n",
      " 10  Doors         9080 non-null   category\n",
      "dtypes: category(9), int32(1), int64(1)\n",
      "memory usage: 239.9 KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "HG2CamjdPfFs"
   },
   "source": [
    "\n",
    "\n",
    "## 2. Basic exploratory questions using Python\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "_OM7Gcip50oE"
   },
   "source": [
    "Here we compute various summary statistics, which are quantities, such as the mean and standard deviation, that capture various characteristics of a potentially large set of values with a single number or a small set of numbers. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "PHyGIQ2OTwfl"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(9080, 11)\n"
     ]
    }
   ],
   "source": [
    "print(df.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "BzDyp-DvXDiw"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['Make', 'Model', 'Year', 'Mileage', 'Price', 'Body Style', 'Ex Color',\n",
      "       'In Color', 'Engine', 'Transmission', 'Doors'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "# a pandas dataframe has an attribute called columns:\n",
    "print(df.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "-bIdyCeWXhFG"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Possible body styles:\n",
      "['Sedan', 'SUV', 'Hatchback', 'Wagon', 'Coupe', 'Minivan', 'Van', 'Pickup', 'Convertible', 'Chassis']\n",
      "Categories (10, object): ['Sedan', 'SUV', 'Hatchback', 'Wagon', ..., 'Van', 'Pickup', 'Convertible', 'Chassis']\n"
     ]
    }
   ],
   "source": [
    "# the \"unique\" method helps: \n",
    "print('Possible body styles:')\n",
    "print(df['Body Style'].unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "fZrDVln8bAVc"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4    8221\n",
      "2     766\n",
      "3      93\n",
      "Name: Doors, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(df['Doors'].value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "T6yes3WGdvJ2"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average price of a Honda car = 18337.49\n",
      "Average price of a Mercedes-Benz car = 37620.97\n"
     ]
    }
   ],
   "source": [
    "# the average price of a Honda car versus a Mercedes-Benz car?\n",
    "\n",
    "# For Honda:\n",
    "print('Average price of a Honda car = {:.2f}'.format(df[df['Make'] == 'Honda']['Price'].mean()))\n",
    "# For Mercedes-Benz:\n",
    "print('Average price of a Mercedes-Benz car = {:.2f}'.format(df[df['Make'] == 'Mercedes-Benz']['Price'].mean()))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It is also possible to display the summary for all the attributes simultaneously in a table using the describe() function. If an attribute is quantitative, it will display its mean, standard deviation and various quantiles (including minimum, median, and maximum) values. If an attribute is qualitative, it will display its number of unique values and the top (most frequent) values. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Make</th>\n",
       "      <th>Model</th>\n",
       "      <th>Year</th>\n",
       "      <th>Mileage</th>\n",
       "      <th>Price</th>\n",
       "      <th>Body Style</th>\n",
       "      <th>Ex Color</th>\n",
       "      <th>In Color</th>\n",
       "      <th>Engine</th>\n",
       "      <th>Transmission</th>\n",
       "      <th>Doors</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>9080</td>\n",
       "      <td>9080</td>\n",
       "      <td>9080.0</td>\n",
       "      <td>9080.000000</td>\n",
       "      <td>9080.000000</td>\n",
       "      <td>9080</td>\n",
       "      <td>9080</td>\n",
       "      <td>9080</td>\n",
       "      <td>9080</td>\n",
       "      <td>9080</td>\n",
       "      <td>9080.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>49</td>\n",
       "      <td>1060</td>\n",
       "      <td>24.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10</td>\n",
       "      <td>15</td>\n",
       "      <td>9</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>Nissan</td>\n",
       "      <td>Altima S</td>\n",
       "      <td>2011.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>Black</td>\n",
       "      <td>Black</td>\n",
       "      <td>6 Cyl</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1035</td>\n",
       "      <td>197</td>\n",
       "      <td>2641.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3905</td>\n",
       "      <td>2404</td>\n",
       "      <td>4164</td>\n",
       "      <td>4313</td>\n",
       "      <td>8797</td>\n",
       "      <td>8221.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41875.531057</td>\n",
       "      <td>24410.926652</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>33146.564303</td>\n",
       "      <td>16300.355339</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1490.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>20112.250000</td>\n",
       "      <td>15987.750000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>33532.000000</td>\n",
       "      <td>21500.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>52564.500000</td>\n",
       "      <td>28998.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>279950.000000</td>\n",
       "      <td>499898.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Make     Model    Year        Mileage          Price Body Style  \\\n",
       "count     9080      9080  9080.0    9080.000000    9080.000000       9080   \n",
       "unique      49      1060    24.0            NaN            NaN         10   \n",
       "top     Nissan  Altima S  2011.0            NaN            NaN      Sedan   \n",
       "freq      1035       197  2641.0            NaN            NaN       3905   \n",
       "mean       NaN       NaN     NaN   41875.531057   24410.926652        NaN   \n",
       "std        NaN       NaN     NaN   33146.564303   16300.355339        NaN   \n",
       "min        NaN       NaN     NaN       1.000000    1490.000000        NaN   \n",
       "25%        NaN       NaN     NaN   20112.250000   15987.750000        NaN   \n",
       "50%        NaN       NaN     NaN   33532.000000   21500.000000        NaN   \n",
       "75%        NaN       NaN     NaN   52564.500000   28998.000000        NaN   \n",
       "max        NaN       NaN     NaN  279950.000000  499898.000000        NaN   \n",
       "\n",
       "       Ex Color In Color Engine Transmission   Doors  \n",
       "count      9080     9080   9080         9080  9080.0  \n",
       "unique       15        9     10            2     3.0  \n",
       "top       Black    Black  6 Cyl    Automatic     4.0  \n",
       "freq       2404     4164   4313         8797  8221.0  \n",
       "mean        NaN      NaN    NaN          NaN     NaN  \n",
       "std         NaN      NaN    NaN          NaN     NaN  \n",
       "min         NaN      NaN    NaN          NaN     NaN  \n",
       "25%         NaN      NaN    NaN          NaN     NaN  \n",
       "50%         NaN      NaN    NaN          NaN     NaN  \n",
       "75%         NaN      NaN    NaN          NaN     NaN  \n",
       "max         NaN      NaN    NaN          NaN     NaN  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe(include='all')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that count refers to the number of non-missing values for each attribute."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Covariance:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mileage</th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Mileage</th>\n",
       "      <td>1.098695e+09</td>\n",
       "      <td>-2.188586e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Price</th>\n",
       "      <td>-2.188586e+08</td>\n",
       "      <td>2.657016e+08</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Mileage         Price\n",
       "Mileage  1.098695e+09 -2.188586e+08\n",
       "Price   -2.188586e+08  2.657016e+08"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print('Covariance:')\n",
    "df.cov()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Correlation:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mileage</th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Mileage</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.405068</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Price</th>\n",
       "      <td>-0.405068</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Mileage     Price\n",
       "Mileage  1.000000 -0.405068\n",
       "Price   -0.405068  1.000000"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print('Correlation:')\n",
    "df.corr()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "FWoLpa4kld5u"
   },
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "ZViWoH9Pk2g3"
   },
   "source": [
    "## 3. Basic data visualisation using Python\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "_OM7Gcip50oE"
   },
   "source": [
    "Data visualization is the display of information in a graphic or tabular format. Successful visualization requires that the data (information) be converted into a visual format so that the characteristics of the data and the relationships among data items or attributes can be analyzed or reported. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "> To display the histogram for the milieage attribute by discretizing it into 8 separate bins and counting the frequency for each bin, run this code:\n",
    "\n",
    "**<font color=\"red\"></font>**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAX0AAAD7CAYAAACG50QgAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8QVMy6AAAACXBIWXMAAAsTAAALEwEAmpwYAAASSklEQVR4nO3cX6zcZX7f8fcnZsNaZElxCUeWjWq28kUBK7uLRam2ik5LVRy2CtwgOdoWb4tkiRJ1U7lqTXPR9MISSUUVQQut264wLQ1xm6yMsqGN5eYoqkqXNSm7xhCKAy44trCy2yZ4L2hMvr2Yx92xPeePj88Zn5nn/ZJG85vv/J7fPF+P9fHPz29mUlVIkvrwQ9d6ApKk8TH0Jakjhr4kdcTQl6SOGPqS1BFDX5I6sqTQT3IyybEkryc52mobkhxO8k67v2lo/8eTnEjydpL7hup3teOcSPJUkqx8S5Kk+VzJmf5fqqrPVdX29ngvcKSqtgJH2mOS3A7sBO4AdgDPJFnXxjwL7Aa2ttuOq29BkrRU113F2AeA2bZ9AJgD/kGrv1hVHwPvJTkB3J3kJHBjVb0CkOR54EHg5YVe5Oabb64tW7Ysa4Lf//73ueGGG5Y1di2b1r5genuzr8kz6b299tprf1BVP3ZpfamhX8BvJingX1bVfmCmqs4AVNWZJLe0fTcB/31o7KlW++O2fWl9QVu2bOHo0aNLnObF5ubmmJ2dXdbYtWxa+4Lp7c2+Js+k95bkf42qLzX0v1hVp1uwH07yuwu91ohaLVC//ADJbgbLQMzMzDA3N7fEaV7s3Llzyx67lk1rXzC9vdnX5JnW3pYU+lV1ut2fTfJ14G7gwyQb21n+RuBs2/0UcOvQ8M3A6VbfPKI+6vX2A/sBtm/fXsv913bS/6Wez7T2BdPbm31NnmntbdELuUluSPKZC9vAXwXeAF4CdrXddgGH2vZLwM4k1ye5jcEF21fbUtBHSe5pn9p5eGiMJGkMlnKmPwN8vX268jrg31fVf0ryLeBgkkeA94GHAKrqeJKDwJvAeeCxqvqkHetR4DlgPYMLuAtexJUkraxFQ7+q3gV+fET9u8C984zZB+wbUT8K3Hnl05QkrQS/kStJHTH0Jakjhr4kdcTQl6SOXM3PMKx5x37/D/nK3m9c62lc5uQTX7rWU5DUKc/0Jakjhr4kdcTQl6SOGPqS1BFDX5I6YuhLUkcMfUnqiKEvSR0x9CWpI4a+JHXE0Jekjhj6ktQRQ1+SOmLoS1JHDH1J6oihL0kdMfQlqSOGviR1xNCXpI4Y+pLUEUNfkjpi6EtSRwx9SeqIoS9JHTH0Jakjhr4kdcTQl6SOGPqS1BFDX5I6suTQT7Iuyf9I8uvt8YYkh5O80+5vGtr38SQnkryd5L6h+l1JjrXnnkqSlW1HkrSQKznT/yrw1tDjvcCRqtoKHGmPSXI7sBO4A9gBPJNkXRvzLLAb2NpuO65q9pKkK7Kk0E+yGfgS8K+Hyg8AB9r2AeDBofqLVfVxVb0HnADuTrIRuLGqXqmqAp4fGiNJGoOlnun/EvD3gT8Zqs1U1RmAdn9Lq28CPhja71SrbWrbl9YlSWNy3WI7JPlrwNmqei3J7BKOOWqdvhaoj3rN3QyWgZiZmWFubm4JL3u5mfWwZ9v5ZY1dTcvt54Jz585d9THWqmntzb4mz7T2tmjoA18EfirJ/cCngRuT/DvgwyQbq+pMW7o52/Y/Bdw6NH4zcLrVN4+oX6aq9gP7AbZv316zs7NL72jI0y8c4sljS2lxvE5+efaqxs/NzbHcP5O1blp7s6/JM629Lbq8U1WPV9XmqtrC4ALtf6mqvw68BOxqu+0CDrXtl4CdSa5PchuDC7avtiWgj5Lc0z618/DQGEnSGFzNafATwMEkjwDvAw8BVNXxJAeBN4HzwGNV9Ukb8yjwHLAeeLndJEljckWhX1VzwFzb/i5w7zz77QP2jagfBe680klKklaG38iVpI4Y+pLUEUNfkjpi6EtSRwx9SeqIoS9JHTH0Jakjhr4kdcTQl6SOGPqS1BFDX5I6YuhLUkcMfUnqiKEvSR0x9CWpI4a+JHXE0Jekjhj6ktQRQ1+SOmLoS1JHDH1J6oihL0kdMfQlqSOGviR1xNCXpI4Y+pLUEUNfkjpi6EtSRwx9SeqIoS9JHTH0Jakjhr4kdcTQl6SOGPqS1JFFQz/Jp5O8muTbSY4n+cetviHJ4STvtPubhsY8nuREkreT3DdUvyvJsfbcU0myOm1JkkZZypn+x8BfrqofBz4H7EhyD7AXOFJVW4Ej7TFJbgd2AncAO4Bnkqxrx3oW2A1sbbcdK9eKJGkxi4Z+DZxrDz/VbgU8ABxo9QPAg237AeDFqvq4qt4DTgB3J9kI3FhVr1RVAc8PjZEkjcGS1vSTrEvyOnAWOFxV3wRmquoMQLu/pe2+CfhgaPipVtvUti+tS5LG5Lql7FRVnwCfS/KngK8nuXOB3Uet09cC9csPkOxmsAzEzMwMc3NzS5nmZWbWw55t55c1djUtt58Lzp07d9XHWKumtTf7mjzT2tuSQv+Cqvo/SeYYrMV/mGRjVZ1pSzdn226ngFuHhm0GTrf65hH1Ua+zH9gPsH379pqdnb2Saf5/T79wiCePXVGLY3Hyy7NXNX5ubo7l/pmsddPam31NnmntbSmf3vmxdoZPkvXAXwF+F3gJ2NV22wUcatsvATuTXJ/kNgYXbF9tS0AfJbmnfWrn4aExkqQxWMpp8EbgQPsEzg8BB6vq15O8AhxM8gjwPvAQQFUdT3IQeBM4DzzWlocAHgWeA9YDL7ebJGlMFg39qvoO8PkR9e8C984zZh+wb0T9KLDQ9QBJ0iryG7mS1BFDX5I6YuhLUkcMfUnqiKEvSR1Ze99c6sCWvd+4qvF7tp3nK1d5jFFOPvGlFT+mpLXFM31J6oihL0kdMfQlqSOGviR1xNCXpI4Y+pLUEUNfkjpi6EtSRwx9SeqIoS9JHTH0Jakjhr4kdcTQl6SOGPqS1BFDX5I6YuhLUkcMfUnqiKEvSR0x9CWpI4a+JHXE0Jekjhj6ktQRQ1+SOmLoS1JHDH1J6oihL0kdMfQlqSOGviR1xNCXpI4sGvpJbk3yW0neSnI8yVdbfUOSw0neafc3DY15PMmJJG8nuW+ofleSY+25p5JkddqSJI2ylDP988CeqvpzwD3AY0luB/YCR6pqK3CkPaY9txO4A9gBPJNkXTvWs8BuYGu77VjBXiRJi1g09KvqTFX9Ttv+CHgL2AQ8ABxoux0AHmzbDwAvVtXHVfUecAK4O8lG4MaqeqWqCnh+aIwkaQyuaE0/yRbg88A3gZmqOgODfxiAW9pum4APhoadarVNbfvSuiRpTK5b6o5JfgT4VeBnq+qPFliOH/VELVAf9Vq7GSwDMTMzw9zc3FKneZGZ9bBn2/lljV3LVquv5f45r6Rz586tiXmsNPuaPNPa25JCP8mnGAT+C1X1a638YZKNVXWmLd2cbfVTwK1DwzcDp1t984j6ZapqP7AfYPv27TU7O7u0bi7x9AuHePLYkv9dmxh7tp1flb5Ofnl2xY95pebm5lju+72W2dfkmdbelvLpnQD/Bnirqv7p0FMvAbva9i7g0FB9Z5Lrk9zG4ILtq20J6KMk97RjPjw0RpI0Bks5Xfwi8DeAY0leb7V/CDwBHEzyCPA+8BBAVR1PchB4k8Enfx6rqk/auEeB54D1wMvtJkkak0VDv6r+K6PX4wHunWfMPmDfiPpR4M4rmaAkaeX4jVxJ6oihL0kdMfQlqSOGviR1xNCXpI4Y+pLUEUNfkjpi6EtSRwx9SeqIoS9JHTH0Jakjhr4kdcTQl6SOGPqS1BFDX5I6YuhLUkcMfUnqiKEvSR0x9CWpI4a+JHXE0Jekjhj6ktQRQ1+SOmLoS1JHDH1J6oihL0kdMfQlqSOGviR1xNCXpI4Y+pLUEUNfkjpi6EtSRwx9SeqIoS9JHVk09JN8LcnZJG8M1TYkOZzknXZ/09Bzjyc5keTtJPcN1e9Kcqw991SSrHw7kqSFLOVM/zlgxyW1vcCRqtoKHGmPSXI7sBO4o415Jsm6NuZZYDewtd0uPaYkaZUtGvpV9dvA9y4pPwAcaNsHgAeH6i9W1cdV9R5wArg7yUbgxqp6paoKeH5ojCRpTJa7pj9TVWcA2v0trb4J+GBov1OttqltX1qXJI3RdSt8vFHr9LVAffRBkt0MloKYmZlhbm5uWZOZWQ97tp1f1ti1bLX6evqFQyt+zCs1s/7yeWzb9KPXaDYr59y5c8v+e7yWTWtfML29LTf0P0yysarOtKWbs61+Crh1aL/NwOlW3zyiPlJV7Qf2A2zfvr1mZ2eXNcmnXzjEk8dW+t+1a2/PtvNT2ReM7u3kl2evzWRW0NzcHMv9e7yWTWtfML29LXd55yVgV9veBRwaqu9Mcn2S2xhcsH21LQF9lOSe9qmdh4fGSJLGZNHTxSS/DMwCNyc5Bfwj4AngYJJHgPeBhwCq6niSg8CbwHngsar6pB3qUQafBFoPvNxukqQxWjT0q+qn53nq3nn23wfsG1E/Ctx5RbOTJK0ov5ErSR0x9CWpI4a+JHXE0Jekjhj6ktQRQ1+SOmLoS1JHDH1J6oihL0kdMfQlqSOGviR1xNCXpI4Y+pLUEUNfkjpi6EtSRwx9SeqIoS9JHTH0Jakjhr4kdcTQl6SOGPqS1BFDX5I6ct21noC0mC17v3GtpzDSySe+dK2nIF0xz/QlqSOGviR1xNCXpI4Y+pLUEUNfkjpi6EtSRwx9SeqIoS9JHTH0Jakjhr4kdcSfYZCW6Up+HmLPtvN8ZUw/J+HPQ2ghYz/TT7IjydtJTiTZO+7Xl6SejTX0k6wD/jnwk8DtwE8nuX2cc5Ckno37TP9u4ERVvVtV/xd4EXhgzHOQpG6Ne01/E/DB0ONTwJ8f8xykqTbOn6Ie57WK1dLbNZBxh35G1OqynZLdwO728FySt5f5ejcDf7DMsWvW35nSvmB6e7OvtSu/MO9Tk97bnxlVHHfonwJuHXq8GTh96U5VtR/Yf7UvluRoVW2/2uOsNdPaF0xvb/Y1eaa1t3Gv6X8L2JrktiQ/DOwEXhrzHCSpW2M906+q80l+BvjPwDrga1V1fJxzkKSejf3LWVX1G8BvjOnlrnqJaI2a1r5genuzr8kzlb2l6rLrqJKkKeVv70hSR6Yy9Cflpx6SnExyLMnrSY622oYkh5O80+5vGtr/8dbT20nuG6rf1Y5zIslTSdLq1yf5lVb/ZpItq9jL15KcTfLGUG0svSTZ1V7jnSS7xtDXzyf5/fa+vZ7k/gns69Ykv5XkrSTHk3y11Sf6PVugr4l/z1ZMVU3VjcEF4t8DPgv8MPBt4PZrPa955noSuPmS2i8Ce9v2XuAX2vbtrZfrgdtaj+vac68Cf4HB9yBeBn6y1f828C/a9k7gV1axl58AvgC8Mc5egA3Au+3+prZ90yr39fPA3xux7yT1tRH4Qtv+DPA/2/wn+j1boK+Jf89W6jaNZ/qT/lMPDwAH2vYB4MGh+otV9XFVvQecAO5OshG4sapeqcHfvOcvGXPhWP8RuPfC2cpKq6rfBr53DXq5DzhcVd+rqv8NHAZ2rHJf85mkvs5U1e+07Y+Atxh8Y36i37MF+prPRPS1kqYx9Ef91MNCb/q1VMBvJnktg28hA8xU1RkY/AUGbmn1+fra1LYvrV80pqrOA38I/OlV6GM+4+jlWr3fP5PkO23558ISyET21ZYnPg98kyl6zy7pC6boPbsa0xj6S/qphzXii1X1BQa/OvpYkp9YYN/5+lqo37X6Z7GSvVyLHp8F/izwOeAM8GSrT1xfSX4E+FXgZ6vqjxbadZ75rMneRvQ1Ne/Z1ZrG0F/STz2sBVV1ut2fBb7OYGnqw/ZfS9r92bb7fH2datuX1i8ak+Q64EdZ+lLFShhHL2N/v6vqw6r6pKr+BPhXDN63i+Z4yVzWZF9JPsUgGF+oql9r5Yl/z0b1NS3v2Yq41hcVVvrG4Atn7zK4KHPhQu4d13peI+Z5A/CZoe3/xmD9759w8YW0X2zbd3DxBad3+cEFp28B9/CDC073t/pjXHzB6eAq97SFiy94rnovDC6avcfgwtlNbXvDKve1cWj77zJYE56ovto8ngd+6ZL6RL9nC/Q18e/Zir3313oCq9IU3M/gqv3vAT93reczzxw/2/6yfRs4fmGeDNYGjwDvtPsNQ2N+rvX0Nu2TBK2+HXijPffP+MGX7j4N/AcGF6deBT67iv38MoP/Nv8xgzOeR8bVC/C3Wv0E8DfH0Ne/BY4B32Hw21EbJ7Cvv8hg6eE7wOvtdv+kv2cL9DXx79lK3fxGriR1ZBrX9CVJ8zD0Jakjhr4kdcTQl6SOGPqS1BFDX5I6YuhLUkcMfUnqyP8DQFF1mPBi6msAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "\n",
    "df['Mileage'].hist(bins=8)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> A boxplot can also be used to show the distribution of values for each attribute.\n",
    "\n",
    "**<font color=\"red\"></font>**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.boxplot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> We can finally plot pairwise relationships in a dataset by running the code below. By default, this function will create a grid of axes such that each numeric variable in our dataset will be shared across the y-axes across a single row and the x-axes across a single column. In the diagonal plots, a univariate distribution plot is drawn to show the marginal distribution of the data in each column. Here scatterplot() is used for each pairing of the variables and histplot() for the marginal plots along the diagonal.\n",
    "\n",
    "**<font color=\"red\"></font>**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "h9MF9IA2mBAE"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.PairGrid at 0x7fa03022a760>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "sns.pairplot(df)"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [
    "FYZv8R_TImsZ"
   ],
   "name": "ECS766_Lab_1.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
